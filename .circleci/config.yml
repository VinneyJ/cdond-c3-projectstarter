version: 2.1


orbs: 
  slack: circleci/slack@4.10.1


defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  failure_notification:
        steps:
        - slack/notify:
            event: fail
            channel: ci-notifications
            template: basic_fail_1

  install-ansible:
    description: Install ansible
    steps:
      - run:
          name: Installing ansible
          command: |
            sudo apt update
            sudo apt install ansible

  install-aws-cli:
    description: Install AWS cli
    steps:
      - run:
          name: Installing AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-gzip-tar:
    description: Install gzip and tar
    steps:
      - run:
          name: Installing gzip and tar
          command: |
            sudo apt -y install gzip
            sudo apt -y install tar

  install-nodejs:
    description: Install Nodejs v13.x
    steps:
      - run:
          name: Install Nodejs v13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs






#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi



            
jobs:
  build-frontend:
  
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            
            cd frontend
            npm install
            npm run build

            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - failure_notification

  build-backend:

    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - failure_notification

  test-frontend:
   
      # Docker image here
    <<: *defaults
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
          
      - restore_cache:
          keys:
            - frontend-build

      - failure_notification
      # Restore from cache
      # Your job code here
                
  test-backend:
      # Docker image here
    <<: *defaults 
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
          
      - restore_cache:
          keys:
            - backend-build

      - failure_notification
            
  scan-frontend:
    <<: *defaults 
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - failure_notification



  scan-backend:
    <<: *defaults 
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

      - failure_notification
      

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
    - slack/notify:
        event: pass
        channel: ci-notifications
        template: basic_success_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and Gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install-ansible
      - install-aws-cli
      - install-gzip-tar
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2e:9b:91:11:6c:7d:65:c5:8d:02:a5:00:e7:9d:c2:3f"]
      # attach workspace
      - attach_workspace:
          at: ~/
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment     

  run-migrations:
    <<: *defaults
    steps:
      # Checkout code from git
      - checkout
      - install-aws-cli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # In kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/2V7ezmEYrPFewgk4kqVVu2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending"
            fi
      - destroy-environment
     #Here's where you will add some code to rollback on failure      

  deploy-frontend:
    <<: *defaults
    steps:
      - checkout
      - install-aws-cli
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - frontend-build

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - install-ansible
      - install-gzip-tar
      - install-nodejs
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["2e:9b:91:11:6c:7d:65:c5:8d:02:a5:00:e7:9d:c2:3f"]
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Package Backend Artefact
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
    # docker:
    #   # Docker image here
    # steps:
    #   # Checkout code from git
    #   - run:
    #       name: Get old stack workflow id
    #       command: |
    #         # your code here
    #         export OldWorkflowID="the id here"
    #         export STACKS=[] #put the list of stacks here
    #   - run:
    #       name: Remove old stacks and files
    #       command: |
    #         if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
    #         then
    #           # your code here
    #         fi
            

workflows:
  default:
    jobs:
      - build-frontend
          
      - build-backend
          
      - test-frontend:
          requires: [build-frontend]
          
      - test-backend:
          requires: [build-backend]

      - scan-frontend:
          requires: [build-frontend]
          
      - scan-backend:
          requires: [build-backend]

      - notify_on_success:
          requires: [scan-backend]
          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]

      - deploy-backend:
          requires: [run-migrations]

      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]